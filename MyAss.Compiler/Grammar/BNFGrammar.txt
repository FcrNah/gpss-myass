
Rules of Thumb:
1. There is no difference between command and block right now, all are verbs;
2. Verb operator (if exits) is first operand;
3. Operands separated by Comma or Whitespace char;
	3.1 Despite of it spaces can be used inside parenthesized expressions, 
		'cos whitespaces are ignored inside parexpressions;
4. Suffix logic (Assign/Savevalue) fubars current grammatics, is not supported;
5. Issue with optional label solved with verb name lookup in Framework metadata;

<source> ::= ( <directive> )+ <model>

	<directive> ::= <directiveid> <directiveparam>

		<directiveid> ::= ( "@" "using" )| ( "@" "usingP" )

		<directiveparam> ::= <qual-id>

<model> ::= ( <verb> [ <comment> ] "\r\n" )+

	<verb> ::= [ <id> ] <id> [ <operands> ]

		<operands> ::= <operand> ( "," <operand> )*

		<operand> ::= "" | <expression> | <parexpression>

		<parexpression> ::= "(" <expression> ")"

		<expression> ::= <term> ( <additive> )*

			<additive> ::= <addop> <term>

			<addop> ::= "+" | "-"

			<term> ::= <signedfactor> ( <multiplicative> )*

				<multiplicative> ::= <mulop> <factor>

				<mulop> ::= "#" | "/" | "\" | "^"
 
				<signedfactor> ::= [ <addop> ] <factor>

					<factor> ::= <literal> | <lval> | "(" <expression> ")"

						<lval> ::= <id> [ <accessor> ]

							<accessor> ::= <call> | <directsna>

							<call> ::= "(" <actuals> ")"

								<actuals> ::= "" | <expression> ( "," <expression> )*

							<directsna> ::= "$" <id>

						<literal> ::= <number>


<number> ::= <integer> | <real>

	<integer> ::= ( <digit> )+

	<real> ::= <integer> "." <integer>

<id> ::= <letter> ( <letter> | <digit> | "_" )*

<qual-id> ::= <letter> ( <letter> | <digit> | "_" | "." )*

<comment> :== ";" <any-char>

	<letter> :=   "A" | "B" | "C" | "D" | "E" | "F" | "G"
			| "H" | "I" | "J" | "K" | "L" | "M" | "N"
			| "O" | "P" | "Q" | "R" | "S" | "T" | "U"
			| "V" | "W" | "X" | "Y" | "Z" 
			| "a" | "b" | "c" | "d" | "e" | "f" | "g"
			| "h" | "i" | "j" | "k" | "l" | "m" | "n"
			| "o" | "p" | "q" | "r" | "s" | "t" | "u"
			| "v" | "w" | "x" | "y" | "z"

	<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

	<any-char> ::= any character except "\r", "\n", "\0"


BNF syntax description:
(...)	- grouping
[...]	- optional item
(...)*	- items repeating 0 or more times
(...)+	- items repeating 1 or more times
|		- choice operator


ID Types:
- Label
- VerbName
- Entity Instance Name
- Method (or SNA)
- Directive parameter


Thoughts:
1. External libraries imports
	1.1 Possibility to use qualified types like ThirdParty.Verbs.MyGenerate
	1.2 Add language directives like @using ThirdParty.Verbs
		1.2.1 This should be for Namespaces and Types also (for procedures)

2. SNA may not be wrapped in static methods, but just methods on the Entity;

3. Simulation object should not be singleton

4. Add logic to restrict duplicate labels