
BNF syntax description:
(...)	- grouping
[...]	- optional item
(...)*	- items repeating 0 or more times
(...)+	- items repeating 1 or more times
|		- choice operator

Parser grammar:
<leadingtrivia> ::= ( <WHITE> | <comment> | <LF> )*
<trailingtrivia> ::= [ <WHITE> ] [ <comment>]
<comment> ::= <SEMICOL> ( <any-token> )*
  <any-token> ::= any token except <LF> and <EOF>
<qual-id> ::= (<id> <PERIOD> )* <id>
<number> ::= <integer> [ <PERIOD> <integer> ]

<model> ::= <leadingtrivia> <directives> <verbs> <EOF>
  <directives> :: = ( <ATSIGN> <directive> <trailingtrivia> <LF> <leadingtrivia> )* 
    <directive> ::= <USING> | <USINGP> ( <WHITE> )+ <qual-id>
  <verbs> ::= ( <verb> <trailingtrivia> <LF> <leadingtrivia> )*
    <verb> ::= [ <id> ( <WHITE> )+ ] <qual-id> [ ( <WHITE> )+ <operands> ]
      <operands> ::= <operand> ( ( <COMMA> | <WHITE> ) <operand> )*
        <operand> ::= [ <expression> | <parexpression> ]
          <parexpression> ::= <LPAR> <expression> <RPAR>
          <expression> ::= <term> ( <addop> <term> )*
            <addop> ::= <PLUS> | <MINUS>
            <term> ::= <signedfactor> ( <mulop> <factor> )*
              <mulop> ::= <OCTOTHORPE> | <FWDSLASH> | <BCKSLASH> | <CARRET>
              <signedfactor> ::= [ <addop> ] <factor>
                <factor> ::= <literal> | <call> | <LPAR> <expression> <RPAR>
                  <call> ::= <lval> | <procedurecall> | <snacall>
                    <lval> ::= <id>
                    <snacall> ::= <qual-id> <DOLLAR> <id>
                    <procedurecall> ::= <qual-id> <LPAR> <actuals> <RPAR>
                      <actuals> ::= [ <expression> ( <COMMA> <expression> )* ]
                  <literal> ::= <number>


Token grammar:
<USING> ::= 'using'
<USINGP> ::= 'usingp'

<PLUS> ::= '+'
<MINUS> ::= '-'
<OCTOTHORPE> ::= '#'
<FWDSLASH> ::= '/'
<BCKSLASH> ::= '\'
<CARRET> ::= '^'

<LPAR> ::= '('
<RPAR> ::= ')'
<DOLLAR> ::= '$'
<ASTERISK> ::= '*'
<COMMA> ::= ','
<SEMICOL> ::= ';'
<ATSIGN> ::= '@'
<PERIOD> ::= '.'
<UNDERSCORE> ::= '_'

<ILLEGAL>
<EOF> ::= '\0'
<LF> ::= '\r' | '\n'
<WHITE> ::= ' '

<id> ::= <letter> | <UNDERSCORE> | <id> <letter> | <id> <digit> | <id> <UNDERSCORE>
<integer> ::= <digit> | <integer> <digit>

  <letter> :=   'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'
      | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N'
      | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U'
      | 'V' | 'W' | 'X' | 'Y' | 'Z' 
      | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g'
      | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n'
      | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u'
      | 'v' | 'w' | 'x' | 'y' | 'z'
  <digit> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'