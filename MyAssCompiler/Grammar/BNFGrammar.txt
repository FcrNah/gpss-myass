
Rules of Thumb:
0. There is no difference between command and block right now, all verbs are blocks;
1. If block has one operand - its always operand, not operator;
2. [ID] ID [ID] issue with label-verb-operand will be postponed to linker; *
3. Operands can be separated only by comma, space separator is not supported;
4. Suffix logic (Assign/Savevalue) fubars current grammatics, is not supported;

<model> ::= { <verb> }+

<verb> ::= <block> | <command>

	<block> ::= [ ID ] ID [ <operator> ] [ <operands> ]

		<operator> ::= ID

		<operands> ::= <operand> { "," <operand> }

		<operand> ::= "" | <expr> [ <suffixoperator> ]

		// is not supported
		<suffixoperator> ::= "+" | "-"

		<expr> ::= <term> { <addop> <term> }

			<term> ::= <signedfactor> { <mulop> <factor> }

			<addop> ::= "+" | "-"

				<signedfactor> ::= [ <addop> ] <factor>

				<mulop> ::= "#" | "/" | "\" | "^"
 
					<factor> ::= <literal> | <lval> | "(" <expression> ")"

						<lval> ::= ID [ <accessor> ]

							<accessor> ::= <call> | <directsna>

							<call> ::= "(" <actuals> ")"

								<actuals> ::= "" | <expr> { "," <expr> }

							<directsna> ::= "$" ID

						<literal> ::= INT | DOUBLE | STRING



* There are cases for this issue:
1. Label Block Operator Operand1
2. Label Block Operand1
3. Label Block
4. Block Operator Operand1
5. Block Operand1
6. Block


Found grammar issues:
- "Some Some (Fun(1,2,3))" vs "Some Some(Fun(1,2,3))"
